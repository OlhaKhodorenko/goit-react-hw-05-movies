{"version":3,"file":"static/js/209.f22963e1.chunk.js","mappings":"wiBAGA,SAASA,EAAOC,GACd,MAAiB,kBAANA,EACFA,EAEQ,kBAANA,EACFC,SAASD,EAAG,SADrB,EAUF,IAAME,GAAQC,EAAAA,EAAAA,aAAiB,SAACC,EAAOC,GACrC,IACEC,EAaOF,EAbPE,eACAC,EAYOH,EAZPG,YAFF,EAcSH,EAXPI,iBAAAA,OAHF,MAGqB,OAHrB,IAcSJ,EAVPK,kBAAAA,OAJF,SAKEC,EASON,EATPM,OACAC,EAQOP,EARPO,QAEAC,EAMOR,EANPQ,IACAC,EAKOT,EALPS,QACAC,EAIOV,EAJPU,YACAC,EAGOX,EAHPW,OACAC,EAEOZ,EAFPY,MACGC,E,oIAbL,CAcSb,EAdT,GAgBMc,EAAWnB,EAAOiB,GAClBG,EAAYpB,EAAOgB,GAEnBK,EAAS,EAAH,CAAKf,IAAAA,EAAKW,MAAAA,EAAOD,OAAAA,GAAWE,GAKxC,EC5BF,YAA+E,iBAAJ,GAAI,EAA3DL,EAA2D,EAA3DA,IAAKS,EAAsD,EAAtDA,OAAQC,EAA8C,EAA9CA,MAAOR,EAAuC,EAAvCA,YAAaL,EAA0B,EAA1BA,kBACnD,GAA4Bc,EAAAA,EAAAA,UAAS,QAA9BC,EAAP,KAAeC,EAAf,KAEMC,EAAqB,WAAXF,EACVG,EAAuB,YAAXH,EACZI,EAAoB,SAAXJ,EACTK,EAAsB,WAAXL,GAEjBM,EAAAA,EAAAA,YAAU,WACR,GAAIrB,EACF,OAAOgB,EAAU,UAGnBA,EAAUb,EAAM,UAAY,UAC3B,CAACH,EAAmBG,IAEvB,IAAMmB,GAAWC,EAAAA,EAAAA,UAEXC,EAAQ,WACRF,EAASG,UACXH,EAASG,QAAU,OAIjBC,GAAOC,EAAAA,EAAAA,cAAY,WACvB,GAAKxB,EAAL,CAEAqB,IAEA,IAAMI,EAAM,IAAIC,OAAOpC,MAEvBmC,EAAIzB,IAAMA,EAENE,IACFuB,EAAIvB,YAAcA,GAGhBO,IACFgB,EAAIE,OAASlB,GAGXC,IACFe,EAAIf,MAAQA,GAGde,EAAIG,OAAS,WACXP,IACAR,EAAU,WAGZY,EAAII,QAAU,WACZR,IACAR,EAAU,WAGZM,EAASG,QAAUG,KAClB,CAACzB,EAAKE,EAAaO,EAAQC,IAa9B,OAVAoB,EAAAA,EAAAA,kBAAgB,WACd,IAAIjC,EAMJ,MAJe,YAAXe,GACFW,IAGKF,IACN,CAACT,EAAQW,EAAM1B,IAEX,CACLe,OAAAA,EACAE,QAAAA,EACAE,OAAAA,EACAD,UAAAA,EACAE,SAAAA,GD9CmBc,CAAS,EAAD,GACxBvC,EADwB,CAE3BK,kBAJmBI,GAAWJ,KAuBhC,IArBA,EAAQoB,SAqBO,CACb,GAAIvB,EAAgB,OAAOH,EAAAA,EAAAA,eAAAA,MAAAA,OAAAA,OAAAA,CAAKS,IAAKN,GAAoBc,IAGzD,GAAIb,EAAa,OAAOA,EAIxB,MAAuBa,EAAfwB,MAAAA,OAAR,MAAgB,GAAhB,EACA,OACEzC,EAAAA,EAAAA,eAAAA,MAAAA,OAAAA,OAAAA,GACMiB,EAAAA,CACJwB,MAAK,GACH7B,OAAWI,EAAL,KACNH,MAAUE,EAAL,KACL2B,WAAYrC,GACToC,MAOX,OACEzC,EAAAA,EAAAA,eAAAA,MAAAA,OAAAA,OAAAA,CACES,IAAKA,EACLC,QAASA,EACTC,YAAaA,EACbJ,OAAQA,EACRC,QAASA,GACLS,O,SExDV,EAhCa,WACX,IAAQ0B,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCvB,EAAAA,EAAAA,UAAS,MAAzC,eAAOyB,EAAP,KAAiBC,EAAjB,KAMA,OAJAnB,EAAAA,EAAAA,YAAU,YACRoB,EAAAA,EAAAA,IAAkBJ,GAASK,KAAKF,KAC/B,CAACH,IAECE,EAKHA,IACE,wBACGA,EAASI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACZ,2BACE,SAACtD,EAAD,CACEU,IAAG,0CAAqC4C,GACxCC,IAAKH,EACLtC,MAAO,IACPD,OAAQ,IACRP,iBAAiB,UAEnB,wBAAK8C,KACL,uCAAeC,OATRF,QAPR,O,yMCTX,EALiB,CACfK,SAAU,+BACVC,IAAK,oCCCCA,EAAkBC,EAAAA,IAAbF,EAAaE,EAAAA,SAEbC,EAAW,mCAAG,WAAMC,GAAN,uFACFC,IAAAA,IAAA,UAClBL,EADkB,uCACqBC,IAFnB,cACnBK,EADmB,yBAIlBA,EAASC,MAJS,2CAAH,sDAOXC,EAAe,mCAAG,WAAOC,GAAP,4FAAoBL,EAApB,+BAA2B,EAA3B,SACHC,IAAAA,IAAA,UACrBL,EADqB,iCACYC,EADZ,gCACuCG,EADvC,kBACqDK,IAFlD,cACvBC,EADuB,yBAItBA,EAAYH,KAAKI,SAJK,2CAAH,sDAOfC,EAAiB,mCAAG,WAAMjB,GAAN,uFACJU,IAAAA,IAAA,UACtBL,EADsB,kBACJL,EADI,oBACUM,EADV,oBADI,cACzBY,EADyB,yBAIxBA,EAAaN,MAJW,2CAAH,sDAOjBf,EAAiB,mCAAG,WAAMG,GAAN,uFACPU,IAAAA,IAAA,UACnBL,EADmB,kBACDL,EADC,4BACqBM,EADrB,oBADO,cACzBa,EADyB,yBAIxBA,EAAUP,KAAKQ,MAJS,2CAAH,sDAOjBC,EAAY,mCAAG,WAAMrB,GAAN,uFACAU,IAAAA,IAAA,UACrBL,EADqB,kBACHL,EADG,4BACmBM,EADnB,2BADA,cACpBgB,EADoB,yBAInBA,EAAYV,KAAKI,SAJE,2CAAH","sources":["../node_modules/react-img-placeholder/src/image/image.tsx","../node_modules/react-img-placeholder/src/image/use-image.js","components/Cast.jsx","service/settings.js","service/api.js"],"sourcesContent":["import * as React from 'react';\r\nimport { useImage } from './use-image';\r\n\r\nfunction getInt(x) {\r\n  if (typeof x === 'number') {\r\n    return x;\r\n  }\r\n  if (typeof x === 'string') {\r\n    return parseInt(x, 10); // returns NaN if string does not starts with number\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * React Component for images which shows\r\n * placeholder while image is loading\r\n */\r\nconst Image = React.forwardRef((props, ref) => {\r\n  const {\r\n    placeholderSrc,\r\n    placeholder,\r\n    placeholderColor = 'gray',\r\n    ignorePlaceholder = false,\r\n    onLoad,\r\n    onError,\r\n\r\n    src,\r\n    loading,\r\n    crossOrigin,\r\n    height,\r\n    width,\r\n    ...rest\r\n  }: any = props;\r\n\r\n  const intWidth = getInt(width);\r\n  const intHeight = getInt(height);\r\n\r\n  const shared = { ref, width, height, ...rest };\r\n\r\n  // if loading (`lazy` | `eager`) is provided ignore adding placeholder\r\n  const shouldIgnore = loading || ignorePlaceholder;\r\n\r\n  const { isLoaded } = useImage({\r\n    ...props,\r\n    ignorePlaceholder: shouldIgnore,\r\n  });\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // throw error if src is not provided\r\n    if (!src) {\r\n      throw new Error(\r\n        `Image is missing required \"src\" property. Make sure you pass \"src\" in props to the \\`react-image-placeholder\\` component.`\r\n      );\r\n    }\r\n\r\n    if (!intHeight || !intWidth) {\r\n      throw new Error(\r\n        `Image with src \"${src}\" must use unitless \"width\" and \"height\" properties.`\r\n      );\r\n    }\r\n  }\r\n\r\n  // conditions for, `src` loading and if `src` fails\r\n  if (!isLoaded) {\r\n    if (placeholderSrc) return <img src={placeholderSrc} {...shared} />;\r\n\r\n    // react element\r\n    if (placeholder) return placeholder;\r\n\r\n    // default placeholder if source and element is not provided\r\n    // if styles are there in shared it can override\r\n    const { style = {} } = shared;\r\n    return (\r\n      <div\r\n        {...shared}\r\n        style={{\r\n          height: `${intHeight}px`,\r\n          width: `${intWidth}px`,\r\n          background: placeholderColor,\r\n          ...style,\r\n        }}\r\n      ></div>\r\n    );\r\n  }\r\n\r\n  // shows up after loading of `src`\r\n  return (\r\n    <img\r\n      src={src}\r\n      loading={loading}\r\n      crossOrigin={crossOrigin}\r\n      onLoad={onLoad}\r\n      onError={onError}\r\n      {...shared}\r\n    />\r\n  );\r\n});\r\n\r\nexport { Image };\r\n","import {\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n  useCallback,\r\n  useLayoutEffect,\r\n} from 'react';\r\n\r\n/**\r\n * Hook which loads image and let us know the status\r\n * so we can show placeholder/fallback\r\n *\r\n * @returns status for image loading process\r\n */\r\nfunction useImage({ src, srcSet, sizes, crossOrigin, ignorePlaceholder } = {}) {\r\n  const [status, setStatus] = useState('idle');\r\n\r\n  const isError = status === 'failed';\r\n  const isLoading = status === 'loading';\r\n  const isIdle = status === 'idle';\r\n  const isLoaded = status === 'loaded';\r\n\r\n  useEffect(() => {\r\n    if (ignorePlaceholder) {\r\n      return setStatus('loaded');\r\n    }\r\n\r\n    setStatus(src ? 'loading' : 'idle');\r\n  }, [ignorePlaceholder, src]);\r\n\r\n  const imageRef = useRef();\r\n\r\n  const flush = () => {\r\n    if (imageRef.current) {\r\n      imageRef.current = null;\r\n    }\r\n  };\r\n\r\n  const load = useCallback(() => {\r\n    if (!src) return;\r\n\r\n    flush();\r\n\r\n    const img = new window.Image();\r\n\r\n    img.src = src;\r\n\r\n    if (crossOrigin) {\r\n      img.crossOrigin = crossOrigin;\r\n    }\r\n\r\n    if (srcSet) {\r\n      img.srcset = srcSet;\r\n    }\r\n\r\n    if (sizes) {\r\n      img.sizes = sizes;\r\n    }\r\n\r\n    img.onload = () => {\r\n      flush();\r\n      setStatus('loaded');\r\n    };\r\n\r\n    img.onerror = () => {\r\n      flush();\r\n      setStatus('failed');\r\n    };\r\n\r\n    imageRef.current = img;\r\n  }, [src, crossOrigin, srcSet, sizes]);\r\n\r\n  // we want this effect to run synchronously before UI gets painted as we are working with dom api\r\n  useLayoutEffect(() => {\r\n    if (ignorePlaceholder) return;\r\n\r\n    if (status === 'loading') {\r\n      load();\r\n    }\r\n\r\n    return flush;\r\n  }, [status, load, ignorePlaceholder]);\r\n\r\n  return {\r\n    status,\r\n    isError,\r\n    isIdle,\r\n    isLoading,\r\n    isLoaded,\r\n  };\r\n}\r\n\r\nexport { useImage };\r\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCredits } from 'service/api';\nimport { Image } from 'react-img-placeholder';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castList, setCastList] = useState(null);\n\n  useEffect(() => {\n    fetchMovieCredits(movieId).then(setCastList);\n  }, [movieId]);\n\n  if (!castList) {\n    return null;\n  }\n\n  return (\n    castList && (\n      <ul>\n        {castList.map(({ id, name, character, profile_path }) => (\n          <li key={id}>\n            <Image\n              src={`https://image.tmdb.org/t/p/w300/${profile_path}`}\n              alt={name}\n              width={100}\n              height={150}\n              placeholderColor=\"pink\"\n            ></Image>\n            <h2>{name}</h2>\n            <p>Character: {character}</p>\n          </li>\n        ))}\n      </ul>\n    )\n  );\n};\nexport default Cast;\n","const settings = {\n  BASE_URL: 'https://api.themoviedb.org/3',\n  KEY: '33da1ae0687d870981cf19ad4813876b',\n};\n\nexport default settings;\n","import axios from 'axios';\nimport settings from './settings';\n\nconst { KEY, BASE_URL } = settings;\n\nexport const getTrending = async page => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const getMovieByQuery = async (searchQuery, page = 1) => {\n  const foundMovies = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&page=${page}&query=${searchQuery}`\n  );\n  return foundMovies.data.results;\n};\n\nexport const fetchMovieDetails = async id => {\n  const movieDetails = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${KEY}&language=en-US`\n  );\n  return movieDetails.data;\n};\n\nexport const fetchMovieCredits = async id => {\n  const movieCast = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return movieCast.data.cast;\n};\n\nexport const fetchReviews = async id => {\n  const movieReview = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return movieReview.data.results;\n};\n"],"names":["getInt","x","parseInt","Image","React","props","ref","placeholderSrc","placeholder","placeholderColor","ignorePlaceholder","onLoad","onError","src","loading","crossOrigin","height","width","rest","intWidth","intHeight","shared","srcSet","sizes","useState","status","setStatus","isError","isLoading","isIdle","isLoaded","useEffect","imageRef","useRef","flush","current","load","useCallback","img","window","srcset","onload","onerror","useLayoutEffect","useImage","style","background","movieId","useParams","castList","setCastList","fetchMovieCredits","then","map","id","name","character","profile_path","alt","BASE_URL","KEY","settings","getTrending","page","axios","response","data","getMovieByQuery","searchQuery","foundMovies","results","fetchMovieDetails","movieDetails","movieCast","cast","fetchReviews","movieReview"],"sourceRoot":""}